<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on A Lazy Coder</title>
    <link>https://hundredwz.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on A Lazy Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 17 Apr 2018 08:25:40 +0000</lastBuildDate>
    
	<atom:link href="https://hundredwz.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Raft造轮子VI</title>
      <link>https://hundredwz.github.io/post/Raft%E9%80%A0%E8%BD%AE%E5%AD%90VI/</link>
      <pubDate>Tue, 17 Apr 2018 08:25:40 +0000</pubDate>
      
      <guid>https://hundredwz.github.io/post/Raft%E9%80%A0%E8%BD%AE%E5%AD%90VI/</guid>
      <description>&lt;p&gt;我们上一篇说了领导的选举，本篇讨论日志和心跳包的处理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Raft造轮子V</title>
      <link>https://hundredwz.github.io/post/Raft%E9%80%A0%E8%BD%AE%E5%AD%90V/</link>
      <pubDate>Tue, 17 Apr 2018 06:59:00 +0000</pubDate>
      
      <guid>https://hundredwz.github.io/post/Raft%E9%80%A0%E8%BD%AE%E5%AD%90V/</guid>
      <description>&lt;p&gt;我们上一篇文章分析了一个节点作为主动发起方，向别的节点请求投票的信息，本篇就分析下接收方的工作流程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Raft造轮子IV</title>
      <link>https://hundredwz.github.io/post/Raft%E9%80%A0%E8%BD%AE%E5%AD%90IV/</link>
      <pubDate>Tue, 17 Apr 2018 06:15:00 +0000</pubDate>
      
      <guid>https://hundredwz.github.io/post/Raft%E9%80%A0%E8%BD%AE%E5%AD%90IV/</guid>
      <description>&lt;p&gt;经过上一篇文章关于一些基础“接口”的定义，我们本篇开始操作核心，节点。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Raft造轮子I</title>
      <link>https://hundredwz.github.io/post/Raft%E9%80%A0%E8%BD%AE%E5%AD%90I/</link>
      <pubDate>Fri, 13 Apr 2018 07:02:24 +0000</pubDate>
      
      <guid>https://hundredwz.github.io/post/Raft%E9%80%A0%E8%BD%AE%E5%AD%90I/</guid>
      <description>&lt;p&gt;前一段时间在学习raft算法，看完后感觉相对paxos来说没有那么复杂,就萌生了要造个轮子的想法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BFS算法</title>
      <link>https://hundredwz.github.io/post/BFS%E7%AE%97%E6%B3%95/</link>
      <pubDate>Fri, 30 Mar 2018 06:56:00 +0000</pubDate>
      
      <guid>https://hundredwz.github.io/post/BFS%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;没想到，像我这样傻的人也接触算法了！
还好，只是最简单的算法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>表达式求值中后缀转换</title>
      <link>https://hundredwz.github.io/post/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%E4%B8%AD%E5%90%8E%E7%BC%80%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Mon, 05 Oct 2015 14:15:00 +0000</pubDate>
      
      <guid>https://hundredwz.github.io/post/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%E4%B8%AD%E5%90%8E%E7%BC%80%E8%BD%AC%E6%8D%A2/</guid>
      <description>&lt;p&gt;这几天闲着无聊用安卓编个计算器，实现方法有很多种。&lt;/p&gt;

&lt;p&gt;想想学过的算法课，干脆点击监听录入表达式，然后中缀转为后缀计算吧&lt;/p&gt;

&lt;p&gt;顺便复习下栈的应用，也不算白学一门课。&lt;/p&gt;

&lt;p&gt;由于学的是c语言的，然后上课没好好听，只好边发文章边学了。&lt;/p&gt;

&lt;p&gt;书上讲的中后缀表达式转换可能对于人工来说相对麻烦点&lt;/p&gt;

&lt;p&gt;忘了在哪看到的一篇帖子，快速的转换，下面列出来方法&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>